{# @var ea \EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext #}
{# @var field \EasyCorp\Bundle\EasyAdminBundle\Dto\FieldDto #}
{# @var entity \EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto #}
{% set current_url = ea_url() %}

{% set target_entity = field.doctrineMetadata.get('targetEntity') %}
{% set crud_id = ea.crudControllers.findCrudIdByCrudFqcn(ea.crudControllers.findCrudFqcnByEntityFqcn(target_entity)) %}

{% set url = ea_url().unset('entityId').setCrudId(crud_id).setAction('index').set('embedContext', {
    mappedBy: field.doctrineMetadata.get('mappedBy'),
    embeddedIn: entity.primaryKeyValue,
    crud_id: ea.crudControllers.findCrudIdByCrudFqcn(ea.crud.controllerFqcn),
    fieldName: field.property
}) %}

{% set id_suffix = '-'~field.property %}

<div id="embed{{ id_suffix }}" class="position-relative embed-loading">
    <div class="position-absolute text-center embed-spinner">
        <div class="spinner-border text-primary spinner-border-lg mt-2"></div>
    </div>
    <div class="embed-content"></div>
</div>

{{ include('@EasyAdmin/crud/includes/_delete_form.html.twig', {crud_id: crud_id, referrer: current_url, id_suffix: id_suffix}, with_context = false) }}

{{ include('@EasyAdmin/crud/includes/_filters_modal.html.twig') }}

<style>
    .embed-spinner {
        display: none;
        top: 50%;
        left: 50%;
        margin-top: -1rem;
        margin-left: -1rem;
        z-index: 10;
    }

    .embed-loading .embed-spinner {
        display: block;
    }

    .embed-loading .embed-content {
        opacity: 0.5;
        pointer-events: none;
    }
</style>

<script>
    window.addEventListener('load', () => {
        const referrer = '{{ current_url|raw }}#embed{{ id_suffix }}'
        const initialUrl = '{{ url|raw }}'
        let currentUrl = initialUrl;

        const embed = document.querySelector('#embed{{ id_suffix }}');
        const embedContent = embed.querySelector('.embed-content');

        const handleFormSubmit = evt => {
            evt.preventDefault();
            const target = new URL(currentUrl);
            target.search = new URLSearchParams(new FormData(evt.target)).toString();
            load(target.toString())
        }

        const handleLinkClick = evt => {
            evt.preventDefault();
            load(evt.currentTarget.href)
        }

        const load = (url) => {
            embed.classList.add('embed-loading');
            fetch(url)
                .then(it => it.text())
                .then(it => embedContent.innerHTML = it)
                .then(() => {
                    // store for later use
                    currentUrl = url;

                    // override referrer of actions, so we get back to the "main" view afterwards, not the embed
                    embedContent.querySelectorAll('.actions a').forEach(action => {
                        const target = new URL(action.href)
                        target.searchParams.set('referrer', referrer);
                        action.href = target.toString();
                    })

                    // remove "index" delete form/modal
                    embedContent.querySelectorAll('#modal-delete, #delete-form').forEach(it => it.remove());
                    // initialize correct delete modal
                    embedContent.querySelectorAll('.action-delete').forEach(action => {
                        action.addEventListener('click', function (e) {
                            e.preventDefault();
                            const id = $(this).parents('tr').first().data('id');

                            $('#modal-delete{{ id_suffix }}').modal({backdrop: true, keyboard: true})
                                .off('click', '#modal-delete-button{{ id_suffix }}')
                                .on('click', '#modal-delete-button{{ id_suffix }}', function () {
                                    let deleteForm = $('#delete-form{{ id_suffix }}');
                                    deleteForm.attr('action', deleteForm.attr('action').replace('__entityId_placeholder__', id));
                                    deleteForm.trigger('submit');
                                });
                        });
                    })

                    // remove "index" filter modal
                    const indexFilterModal = embedContent.querySelector('#modal-filters');
                    if(indexFilterModal) {
                        indexFilterModal.remove();
                    }

                    // HTML5 specifies that a <script> tag inserted with innerHTML should not execute
                    // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
                    // That's why we can't use just 'innerHTML'. See https://stackoverflow.com/a/47614491/2804294
                    const setInnerHTML = function(element, htmlContent) {
                        element.innerHTML = htmlContent;
                        Array.from(element.querySelectorAll('script')).forEach(oldScript => {
                            const newScript = document.createElement('script');
                            Array.from(oldScript.attributes)
                                .forEach(attr => newScript.setAttribute(attr.name, attr.value));
                            newScript.appendChild(document.createTextNode(oldScript.innerHTML));
                            oldScript.parentNode.replaceChild(newScript, oldScript);
                        });
                    };

                    // initialize correct filter modal
                    embedContent.querySelector('.action-filters-button').addEventListener('click', function(event) {
                        let filterButton = event.currentTarget;
                        let filterModal = document.querySelector(filterButton.dataset.modal);
                        let filterModalBody = filterModal.querySelector('.modal-body');

                        $(filterModal).modal({ backdrop: true, keyboard: true });
                        filterModalBody.innerHTML = '<div class="fa-3x px-3 py-3 text-muted text-center"><i class="fas fa-circle-notch fa-spin"></i></div>';

                        $.get(filterButton.getAttribute('href'), function (response) {
                            setInnerHTML(filterModalBody, response);

                            // intercept filter form
                            filterModalBody.querySelector('form').addEventListener('submit', handleFormSubmit)
                        });

                        event.preventDefault();
                        event.stopPropagation();
                    });

                    // intercept filter clear
                    const resetFilters = embedContent.querySelector('.action-filters-reset');
                    if(resetFilters) {
                        resetFilters.addEventListener('click', handleLinkClick)
                    }

                    // intercept sort and pagination
                    embedContent.querySelectorAll('thead a, .pagination a').forEach(link => {
                        link.addEventListener('click', handleLinkClick)
                    })

                    // intercept search
                    embedContent.querySelector('.form-action-search form').addEventListener('submit', handleFormSubmit)

                    // highlight results
                    const searchQuery = new URL(url).searchParams.get('query');
                    if(searchQuery) {
                        $(embedContent).find('table tbody td:not(.actions)').highlight($.merge([searchQuery], searchQuery.split(' ')));
                    }

                    // can be used to re-initialize dynamic content
                    document.dispatchEvent(new Event('ea.embed.content-loaded'))
                })
                .finally(() => embed.classList.remove('embed-loading'))
            ;
        }

        load(initialUrl);
    })
</script>
